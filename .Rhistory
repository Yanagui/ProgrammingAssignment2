for(i in 1:10) {}
for(i in 1:10) {
print(i) }
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
x <- matrix(1:4, 2, 2); y <- matrix(rep(10, 4), 2, 2)
x
y
a<-1;b<-2
a%*% b
a<-1:2;b<-2:3
a%*% b
a<-c(1,1);b<-c(2,2)
a%*% b
x
y
x %*% y
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
h
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
h
?gl
a<- c(rep(1,4),rep(2,4))
a
gl(2,a)
gl(2,2)
gl(2,4)
gl(2,6)
gl(4,12)
gl(2,2)
gl(4,2)
?split
a <- makeVector(c(1,2,3,4))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
a <- makeVector(c(1,2,3,4))
a
a$get()
a$getmean()
cachemean(a)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(a)
cachemean(a)
a$setmean
a$setmean()
mat <- matrix(1:4,2,2)
mat
makeCacheMatrix <- function(x = matrix()) {
solve(x)
}
makeCacheMatrix(mat)
a$set
vb <<- a
vb
vb <<- c
vb
vb<<- ab
vb <<- mat
vb
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
makeCacheMatrix(mat)
b <- makeCacheMatrix(mat)
b$get
b$set()
b$get()
b$getsolve()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
cachesolve(b)
cacheSolve(b)
cacheSolve(b)
mat1 <- matrix(2:5,2,2)
b$set(matrix(2:5,2,2))
cachesolve(b)
cacheSolve(b)
cacheSolve(b)
makeCacheMatrix(mat1)
b <- makeCacheMatrix(mat1)
cacheSolve(b)
cacheSolve(b)
b <- makeCacheMatrix(mat1)
cacheSolve(b)
setwd("G:/Git/Prg2/ProgrammingAssignment2")
source("MakeCacheMatrix")
source("cachematrix.R")
d <- makeCacheMatrix(mat1)
cacheSolve(d)
source("cachematrix.R")
d <- makeCacheMatrix(mat1)
cacheSolve(d)
cacheSolve(d)
d$getsolve
d$getsolve()
d <- makeCacheMatrix(mat1)
d$getsolve()
cacheSolve(d)
d$getsolve()
source("cachematrix.R")
d <- makeCacheMatrix(mat1)
source("cachematrix.R")
source("cachematrix.R")
d <- makeCacheMatrix(mat1)
source("cachematrix.R")
d <- makeCacheMatrix(mat1)
source("cachematrix.R")
d <- makeCacheMatrix(mat1)
